########################################
# THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT MODIFY
########################################
name: "Dispatch: Preview, Deploy, Push"
on:
  workflow_dispatch:
    {}
env:
  NPM_REGISTRY_PROTOCOL_LEVICAPE: https
  NPM_REGISTRY_HOST_LEVICAPE: npm.pkg.github.com
  NPM_TOKEN_LEVICAPE: ${{ secrets.LEVICAPE_NPM_TOKEN }}
  NPM_DEFAULT: ${{ vars.NPM_MIRROR }}
  LEVICAPE_REGISTRY_HOST: npm.pkg.github.com/
  LEVICAPE_REGISTRY: https://npm.pkg.github.com
  LEVICAPE_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NODE_NO_WARNINGS: "1"
  NPM_CONFIG_UPDATE_NOTIFIER: "false"
  FRONTEND_HOSTNAME: na.levicape.cloud
  PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
  APPLICATION_IMAGE_NAME: spork
  APPLICATION_STACKREF_ROOT: ${{ vars.STACK_ROOT }}
  APPLICATION_ENVIRONMENT: ${{ vars.CI_ENVIRONMENT }}
  AWS_PAGER: ""
  AWS_REGION: us-west-2
  AWS_PROFILE: ${{ vars.CI_ENVIRONMENT }}
  PULUMI_STACK_FILTER: ${{ vars.STACK_FILTER }}
  DOCKER_NO_IMAGE: ${{ vars.NO_IMAGE }}
jobs:
  deploy:
    name: Deploy Pulumi Stacks
    runs-on: act-darwin-a64-atoko
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node 22.13.0
        uses: actions/setup-node@v4
        with:
          node-version: 22.13.0
          registry-url: ${{ env.NPM_REGISTRY_PROTOCOL_LEVICAPE }}://${{ env.NPM_REGISTRY_HOST_LEVICAPE }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml
          scope: "@levicape"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - id: cache-npm
        name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-npm-node-modules-${{ hashFiles('**/pnpm-lock.json') }}
          restore-keys: ${{ runner.os }}-build-npm-node-modules-
      - name: Get pnpm store directory
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV;
      - id: cache-pnpm-store
        name: Cache pnpm files
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.json') }}
          restore-keys: ${{ runner.os }}-pnpm-store-
      - name: Verify PULUMI_CONFIG_PASSPHRASE
        run: if [ -z "$PULUMI_CONFIG_PASSPHRASE" ]; then echo "‚ùå‚ùìPULUMI_CONFIG_PASSPHRASE is empty. Stopping workflow.‚ùì"; exit 1; fi;
      - name: Verify APPLICATION_STACKREF_ROOT
        run: if [ -z "$APPLICATION_STACKREF_ROOT" ]; then echo "‚ùå‚ùìAPPLICATION_STACKREF_ROOT is empty. Stopping workflow.‚ùì"; exit 1; fi;
      - name: Verify APPLICATION_ENVIRONMENT
        run: if [ -z "$APPLICATION_ENVIRONMENT" ]; then echo "‚ùå‚ùìAPPLICATION_ENVIRONMENT is empty. Stopping workflow.‚ùì"; exit 1; fi;
      - name: Set NPM Registry to Verdaccio:31313 or NPM_MIRROR
        run: pnpm set registry ${NPM_DEFAULT:-http://localhost:31313};
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List Dependencies
        continue-on-error: true
        run: pnpm list;
      - name: Install Dependencies
        run: pnpm install;
      - name: Build image
        run: |-
          if [ -z "$DOCKER_NO_IMAGE" ]; then 
          													pnpm exec nx pack:build iac-images-application --verbose; 
          												fi;
      - name: Verify AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
      - name: Setup Pulumi state backend
        run: |-
          echo "üîêüõéÔ∏èRetriving AWS credentials with pnpm exec fourtwo aws in üó∫Ô∏è$AWS_REGION";
          pnpm exec fourtwo;
          STRUCTURED_LOGGING=quiet pnpm exec fourtwo aws pulumi ci --region $AWS_REGION > .pulumi-ci;
      - name: Display Pulumi CI output
        run: cat .pulumi-ci;
      - name: Extract exports from Pulumi CI
        run: cat .pulumi-ci | grep "export" > .export-cd;
      - name: Load environment variables
        run: cat .export-cd;
      - name: Create Pulumi Helper Functions
        run: |-
          cat > .pulumi-helper.sh << 'EOF'
          configure_stack() {
          	local step="$1"
          	local stack_name="$2"
          	local stack_cwd="$3"
          	local project="$4"
          	local output="$5"

          	echo "‚úèÔ∏èüè∑Ô∏è Overwriting Pulumi.yaml"
          	echo "${step}: Stack: ${stack_name}. CWD: ${stack_cwd}. Output: ${output}."
          	echo "name: ${project}" >> "${stack_cwd}/Pulumi.yaml"
          	cat "${stack_cwd}"/Pulumi.{yaml,"*".yaml} || true
          }

          setup_stack() {
          	local stack_name="$1"
          	local stack_cwd="$2"
          	
          	echo "ü™ÜüßæSetting up stack: ${stack_name}. CWD: ${stack_cwd}."
          	for cmd in init select; do
          	pulumi stack ${cmd} ${stack_name} -C ${stack_cwd} || true
          	done
          }

          configure_stack_settings() {
          	local stack_cwd="$1"
          	local configs="$2"
          	
          	echo "‚öôÔ∏èConfiguring stack settings ${stack_cwd}"
          	
          	while IFS= read -r line; do
          	if [[ -n "$line" ]]; then
          		key="${line%%=*}"
          		value="${line#*=}"
          		
          		# Expand variables in value
          		eval "value="$value""
          		
          		if [[ -n "$key" && -n "$value" ]]; then
          		echo "üì°Setting $key to üí°$value"
          		pulumi config set --path "$key" "$value" -C "$stack_cwd"
          		fi
          	fi
          	done <<< "$configs"
          }

          refresh_and_preview() {
          	local message="$1"
          	local stack_cwd="$2"
          	shift 2
          	local default_args="$@"

          	check_root || return 0;

          	echo "üö¶ Refreshing ${stack_cwd} at ${message}"
          	echo "üí°Default args: ${default_args}"
          	pulumi refresh --yes --skip-preview --clear-pending-creates --message "${message}-refresh" -C "${stack_cwd}" ${default_args}
          	pulumi preview --show-replacement-steps --message "${message}-preview" -C "${stack_cwd}" ${default_args} || true
          }

          deploy_stack() {
          	local message="$1"
          	local stack_cwd="$2"
          	shift 2
          	local default_args="$@"

          	check_root || return 0;

          	echo "üõ´ Deploying ${stack_cwd} at ${message}"
          	echo "üí°Default args: ${default_args}"
          	pulumi up --yes --message "${message}-up" -C "${stack_cwd}" ${default_args}
          }

          remove_stack() {
          	local message="$1"
          	local stack_cwd="$2"
          	shift 2
          	local default_args="$@"

          	check_root || return 0;

          	echo "ü¶∫ Deleting ${stack_cwd} at ${message}"
          	echo "üí°Default args: ${default_args}"
          	pulumi down --yes --message "${message}-down" -C "${stack_cwd}" ${default_args}
          }

          capture_outputs() {
          	local stack_cwd="$1"
          	local output="$2"

          	echo "üß≤Capturing ${stack_cwd} outputs in ${output}.sh"
          	pulumi stack output -C "${stack_cwd}" --json > "$(pwd)/${output}.json"
          	cat "${output}.json"
          	pulumi stack output -C "${stack_cwd}" --shell > "$(pwd)/${output}.sh"
          	cat "${output}.sh"
          	ls _pulumi
          	chmod +x "$(pwd)/${output}.sh"
          	echo "üéºOutputs captured in ${output}.sh"
          }

          set_root() {
          	local only_root="$1"
          	echo "‚ú¥Ô∏è"
          	echo "Configuring STACKREF_ROOT:"
          	echo "APPLICATION_IMAGE_NAME: ${APPLICATION_IMAGE_NAME}"
          	echo "APPLICATION_STACKREF_ROOT: ${APPLICATION_STACKREF_ROOT}"
          	echo "Current stack only deployed to application root: ${only_root}"

          	export STACKREF_ROOT="${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}"

          	echo "ü§çü§ç"
          	echo "Pulumi resolved stackref root: "
          	echo "STACKREF_ROOT: ${STACKREF_ROOT}"
          	echo "ü§çü§ç"

          	if [[ "${only_root}" == "true" ]]; then
          		if [[ "${APPLICATION_IMAGE_NAME}" == "${STACKREF_ROOT}" ]]; then
          			echo "üÜóüöÄStackref is compatible, setting PULUMI_NO_DEPLOYMENT=false"
          			export PULUMI_NO_DEPLOYMENT=false
          		else
          			echo "üÜóüí§Not in application root stack, skipping deployment with PULUMI_NO_DEPLOYMENT=true"
          			export PULUMI_NO_DEPLOYMENT=true									
          		fi
          	else
          		echo "üöÄüöÄStack not application-only, setting PULUMI_NO_DEPLOYMENT=false"
          		export PULUMI_NO_DEPLOYMENT=false
          	fi
          	echo "‚ú¥Ô∏è"
          }

          check_root() {
          	if [ "${PULUMI_NO_DEPLOYMENT}" = "true" ]; then
          	echo "üí§üí§Skipping deployment"
          	return 1
          	else
          	echo "üî∞üî∞Proceeding with deployment"
          	return 0
          	fi
          }
          EOF
          chmod +x .pulumi-helper.sh
          source .pulumi-helper.sh;
      - name: Deploy spork stacks
        run: |-
          mkdir -p _pulumi;
          source .export-cd;
          echo '@levicape/fourtwo:';
          ls -la node_modules/@levicape/fourtwo || true;
          cat node_modules/@levicape/fourtwo/package.json || true;
          source .pulumi-helper.sh;
          echo ".üìÅ";
          echo "...üìÅ";
          echo "Processing üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application.${{ vars.CI_ENVIRONMENT }}";
          echo "‚öóÔ∏èPULUMI_STACK_FILTER: $PULUMI_STACK_FILTER";
          echo "üí°PULUMI_STACK_CWD: $(pwd)/iac/stacks/src/application";
          echo "üê§PULUMI_STACK_NAME: ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application.${{ vars.CI_ENVIRONMENT }}";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && set_root "true";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/application" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application" "_pulumi/application";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/application";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/application" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]=${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}.${{ vars.CI_ENVIRONMENT }}.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/application" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/application" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/application" "_pulumi/application";
          echo "Stack üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-application.${{ vars.CI_ENVIRONMENT }} processed";
          echo "...üìÇ";
          echo ".üìÇ";
          echo ".üìÅ";
          echo "...üìÅ";
          echo "Processing üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar.${{ vars.CI_ENVIRONMENT }}";
          echo "‚öóÔ∏èPULUMI_STACK_FILTER: $PULUMI_STACK_FILTER";
          echo "üí°PULUMI_STACK_CWD: $(pwd)/iac/stacks/src/codestar";
          echo "üê§PULUMI_STACK_NAME: ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar.${{ vars.CI_ENVIRONMENT }}";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && set_root "true";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/codestar" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar" "_pulumi/codestar";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/codestar";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/codestar" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]=${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}.${{ vars.CI_ENVIRONMENT }}.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/codestar" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/codestar" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/codestar" "_pulumi/codestar";
          echo "Stack üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-codestar.${{ vars.CI_ENVIRONMENT }} processed";
          echo "...üìÇ";
          echo ".üìÇ";
          echo ".üìÅ";
          echo "...üìÅ";
          echo "Processing üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer.${{ vars.CI_ENVIRONMENT }}";
          echo "‚öóÔ∏èPULUMI_STACK_FILTER: $PULUMI_STACK_FILTER";
          echo "üí°PULUMI_STACK_CWD: $(pwd)/iac/stacks/src/datalayer";
          echo "üê§PULUMI_STACK_NAME: ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer.${{ vars.CI_ENVIRONMENT }}";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && set_root "true";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/datalayer" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer" "_pulumi/datalayer";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/datalayer";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/datalayer" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]=${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}.${{ vars.CI_ENVIRONMENT }}.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/datalayer" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/datalayer" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/datalayer" "_pulumi/datalayer";
          echo "Stack üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-datalayer.${{ vars.CI_ENVIRONMENT }} processed";
          echo "...üìÇ";
          echo ".üìÇ";
          echo ".üìÅ";
          echo "...üìÅ";
          echo "Processing üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root.${{ vars.CI_ENVIRONMENT }}";
          echo "‚öóÔ∏èPULUMI_STACK_FILTER: $PULUMI_STACK_FILTER";
          echo "üí°PULUMI_STACK_CWD: $(pwd)/iac/stacks/src/dns/root";
          echo "üê§PULUMI_STACK_NAME: ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root.${{ vars.CI_ENVIRONMENT }}";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && set_root "true";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/dns/root" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root" "_pulumi/dns_root";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/dns/root";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/dns/root" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]=${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}.${{ vars.CI_ENVIRONMENT }}.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/dns/root" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/dns/root" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/dns/root" "_pulumi/dns_root";
          echo "Stack üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-dns-root.${{ vars.CI_ENVIRONMENT }} processed";
          echo "...üìÇ";
          echo ".üìÇ";
          echo ".üìÅ";
          echo "...üìÅ";
          echo "Processing üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc.${{ vars.CI_ENVIRONMENT }}";
          echo "‚öóÔ∏èPULUMI_STACK_FILTER: $PULUMI_STACK_FILTER";
          echo "üí°PULUMI_STACK_CWD: $(pwd)/iac/stacks/src/idp/oidc";
          echo "üê§PULUMI_STACK_NAME: ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc.${{ vars.CI_ENVIRONMENT }}";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && set_root "true";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/idp/oidc" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc" "_pulumi/idp_oidc";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/idp/oidc";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/idp/oidc" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]=${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}.${{ vars.CI_ENVIRONMENT }}.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/idp/oidc" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/idp/oidc" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/idp/oidc" "_pulumi/idp_oidc";
          echo "Stack üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-oidc.${{ vars.CI_ENVIRONMENT }} processed";
          echo "...üìÇ";
          echo ".üìÇ";
          echo ".üìÅ";
          echo "...üìÅ";
          echo "Processing üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users.${{ vars.CI_ENVIRONMENT }}";
          echo "‚öóÔ∏èPULUMI_STACK_FILTER: $PULUMI_STACK_FILTER";
          echo "üí°PULUMI_STACK_CWD: $(pwd)/iac/stacks/src/idp/users";
          echo "üê§PULUMI_STACK_NAME: ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users.${{ vars.CI_ENVIRONMENT }}";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && set_root "true";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/idp/users" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users" "_pulumi/idp_users";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/idp/users";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/idp/users" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]=${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}.${{ vars.CI_ENVIRONMENT }}.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/idp/users" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/idp/users" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/idp/users" "_pulumi/idp_users";
          echo "Stack üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-idp-users.${{ vars.CI_ENVIRONMENT }} processed";
          echo "...üìÇ";
          echo ".üìÇ";
          echo ".üìÅ";
          echo "...üìÅ";
          echo "Processing üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels.${{ vars.CI_ENVIRONMENT }}";
          echo "‚öóÔ∏èPULUMI_STACK_FILTER: $PULUMI_STACK_FILTER";
          echo "üí°PULUMI_STACK_CWD: $(pwd)/iac/stacks/src/levicape/magmap/channels";
          echo "üê§PULUMI_STACK_NAME: ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels.${{ vars.CI_ENVIRONMENT }}";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && set_root "false";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/levicape/magmap/channels" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels" "_pulumi/levicape_magmap_channels";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/levicape/magmap/channels";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/levicape/magmap/channels" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]=${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}.${{ vars.CI_ENVIRONMENT }}.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/magmap/channels" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/magmap/channels" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/levicape/magmap/channels" "_pulumi/levicape_magmap_channels";
          echo "Stack üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-channels.${{ vars.CI_ENVIRONMENT }} processed";
          echo "...üìÇ";
          echo ".üìÇ";
          echo ".üìÅ";
          echo "...üìÅ";
          echo "Processing üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client.${{ vars.CI_ENVIRONMENT }}";
          echo "‚öóÔ∏èPULUMI_STACK_FILTER: $PULUMI_STACK_FILTER";
          echo "üí°PULUMI_STACK_CWD: $(pwd)/iac/stacks/src/levicape/magmap/client";
          echo "üê§PULUMI_STACK_NAME: ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client.${{ vars.CI_ENVIRONMENT }}";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && set_root "false";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/levicape/magmap/client" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client" "_pulumi/levicape_magmap_client";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/levicape/magmap/client";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/levicape/magmap/client" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]=${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}.${{ vars.CI_ENVIRONMENT }}.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/magmap/client" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/magmap/client" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/levicape/magmap/client" "_pulumi/levicape_magmap_client";
          echo "Stack üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-client.${{ vars.CI_ENVIRONMENT }} processed";
          echo "...üìÇ";
          echo ".üìÇ";
          echo ".üìÅ";
          echo "...üìÅ";
          echo "Processing üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http.${{ vars.CI_ENVIRONMENT }}";
          echo "‚öóÔ∏èPULUMI_STACK_FILTER: $PULUMI_STACK_FILTER";
          echo "üí°PULUMI_STACK_CWD: $(pwd)/iac/stacks/src/http";
          echo "üê§PULUMI_STACK_NAME: ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http.${{ vars.CI_ENVIRONMENT }}";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && set_root "true";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/http" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http" "_pulumi/http";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/http";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/http" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]=${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}.${{ vars.CI_ENVIRONMENT }}.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/http" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/http" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/http" "_pulumi/http";
          echo "Stack üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-http.${{ vars.CI_ENVIRONMENT }} processed";
          echo "...üìÇ";
          echo ".üìÇ";
          echo ".üìÅ";
          echo "...üìÅ";
          echo "Processing üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http.${{ vars.CI_ENVIRONMENT }}";
          echo "‚öóÔ∏èPULUMI_STACK_FILTER: $PULUMI_STACK_FILTER";
          echo "üí°PULUMI_STACK_CWD: $(pwd)/iac/stacks/src/levicape/magmap/http";
          echo "üê§PULUMI_STACK_NAME: ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http.${{ vars.CI_ENVIRONMENT }}";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && set_root "false";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/levicape/magmap/http" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http" "_pulumi/levicape_magmap_http";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/levicape/magmap/http";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/levicape/magmap/http" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]=${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}.${{ vars.CI_ENVIRONMENT }}.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/magmap/http" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/magmap/http" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/levicape/magmap/http" "_pulumi/levicape_magmap_http";
          echo "Stack üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-http.${{ vars.CI_ENVIRONMENT }} processed";
          echo "...üìÇ";
          echo ".üìÇ";
          echo ".üìÅ";
          echo "...üìÅ";
          echo "Processing üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web.${{ vars.CI_ENVIRONMENT }}";
          echo "‚öóÔ∏èPULUMI_STACK_FILTER: $PULUMI_STACK_FILTER";
          echo "üí°PULUMI_STACK_CWD: $(pwd)/iac/stacks/src/levicape/magmap/web";
          echo "üê§PULUMI_STACK_NAME: ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web.${{ vars.CI_ENVIRONMENT }}";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && set_root "false";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/levicape/magmap/web" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web" "_pulumi/levicape_magmap_web";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/levicape/magmap/web";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/levicape/magmap/web" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]=${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}.${{ vars.CI_ENVIRONMENT }}.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/magmap/web" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/magmap/web" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/levicape/magmap/web" "_pulumi/levicape_magmap_web";
          echo "Stack üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-web.${{ vars.CI_ENVIRONMENT }} processed";
          echo "...üìÇ";
          echo ".üìÇ";
          echo ".üìÅ";
          echo "...üìÅ";
          echo "Processing üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor.${{ vars.CI_ENVIRONMENT }}";
          echo "‚öóÔ∏èPULUMI_STACK_FILTER: $PULUMI_STACK_FILTER";
          echo "üí°PULUMI_STACK_CWD: $(pwd)/iac/stacks/src/levicape/magmap/monitor";
          echo "üê§PULUMI_STACK_NAME: ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor.${{ vars.CI_ENVIRONMENT }}";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && set_root "false";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/levicape/magmap/monitor" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor" "_pulumi/levicape_magmap_monitor";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/levicape/magmap/monitor";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/levicape/magmap/monitor" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]=${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}.${{ vars.CI_ENVIRONMENT }}.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/magmap/monitor" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/magmap/monitor" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/levicape/magmap/monitor" "_pulumi/levicape_magmap_monitor";
          echo "Stack üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-monitor.${{ vars.CI_ENVIRONMENT }} processed";
          echo "...üìÇ";
          echo ".üìÇ";
          echo ".üìÅ";
          echo "...üìÅ";
          echo "Processing üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot.${{ vars.CI_ENVIRONMENT }}";
          echo "‚öóÔ∏èPULUMI_STACK_FILTER: $PULUMI_STACK_FILTER";
          echo "üí°PULUMI_STACK_CWD: $(pwd)/iac/stacks/src/levicape/magmap/wwwroot";
          echo "üê§PULUMI_STACK_NAME: ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot.${{ vars.CI_ENVIRONMENT }}";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && set_root "false";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack "Deploy" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/levicape/magmap/wwwroot" "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot" "_pulumi/levicape_magmap_wwwroot";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && setup_stack "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot.${{ vars.CI_ENVIRONMENT }}" "$(pwd)/iac/stacks/src/levicape/magmap/wwwroot";
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && configure_stack_settings "$(pwd)/iac/stacks/src/levicape/magmap/wwwroot" 'aws:skipMetadataApiCheck=false
          context:stack.environment.isProd=false
          context:stack.environment.features=aws
          frontend:stack.dns.hostnames[0]=${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}.${{ vars.CI_ENVIRONMENT }}.$FRONTEND_HOSTNAME';
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && refresh_and_preview "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/magmap/wwwroot" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && deploy_stack "${{ github.ref_name }}-${{ github.sha }}" "$(pwd)/iac/stacks/src/levicape/magmap/wwwroot" --non-interactive --suppress-progress --diff --json;
          if [ -n "$PULUMI_STACK_FILTER" ]; then
          														if [ "$PULUMI_STACK_FILTER" = "*" ]; then
          															echo "üëûüå†Running all stacks due to wildcard filter"
          															true
          														elif [ "$PULUMI_STACK_FILTER" = "${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot" ]; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot matched in filter"
          															true
          														elif echo ",$PULUMI_STACK_FILTER," | grep -q ",${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot,"; then
          															echo "üëûüß§Stack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot found in comma-separated list"
          															true
          														else
          															echo "üëûüôÖStack ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot not in filter '$PULUMI_STACK_FILTER', skipping"
          															false
          														fi
          													else
          														echo "üëüüß§No stack filter specified, processing all stacks"
          														true
          													fi && capture_outputs "$(pwd)/iac/stacks/src/levicape/magmap/wwwroot" "_pulumi/levicape_magmap_wwwroot";
          echo "Stack üíæ${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}-magmap-wwwroot.${{ vars.CI_ENVIRONMENT }} processed";
          echo "...üìÇ";
          echo ".üìÇ";
      - name: Tag and push image with git-${{ github.sha }}
        run: |-
          if [[ -z "$PULUMI_STACK_FILTER" || "$PULUMI_STACK_FILTER" == "*" || "$PULUMI_STACK_FILTER" =~ "codestar" ]]; then
          																echo "üìüCodestar output found, deploying image"
          																true
          															else
          																echo "üí¢Please verify PULUMI_STACK_FILTER: $PULUMI_STACK_FILTER 
           This should include codestar for the image push mechanism"
          																exit 0
          															fi;
          ls -la _pulumi || true;
          [ -f _pulumi/application.sh ] && cat _pulumi/application.sh;
          [ -f _pulumi/application.sh ] && source _pulumi/application.sh;
          [ -f _pulumi/codestar.sh ] && cat _pulumi/codestar.sh;
          [ -f _pulumi/codestar.sh ] && source _pulumi/codestar.sh;
          [ -f _pulumi/datalayer.sh ] && cat _pulumi/datalayer.sh;
          [ -f _pulumi/datalayer.sh ] && source _pulumi/datalayer.sh;
          [ -f _pulumi/dns_root.sh ] && cat _pulumi/dns_root.sh;
          [ -f _pulumi/dns_root.sh ] && source _pulumi/dns_root.sh;
          [ -f _pulumi/idp_oidc.sh ] && cat _pulumi/idp_oidc.sh;
          [ -f _pulumi/idp_oidc.sh ] && source _pulumi/idp_oidc.sh;
          [ -f _pulumi/idp_users.sh ] && cat _pulumi/idp_users.sh;
          [ -f _pulumi/idp_users.sh ] && source _pulumi/idp_users.sh;
          [ -f _pulumi/levicape_magmap_channels.sh ] && cat _pulumi/levicape_magmap_channels.sh;
          [ -f _pulumi/levicape_magmap_channels.sh ] && source _pulumi/levicape_magmap_channels.sh;
          [ -f _pulumi/levicape_magmap_client.sh ] && cat _pulumi/levicape_magmap_client.sh;
          [ -f _pulumi/levicape_magmap_client.sh ] && source _pulumi/levicape_magmap_client.sh;
          [ -f _pulumi/http.sh ] && cat _pulumi/http.sh;
          [ -f _pulumi/http.sh ] && source _pulumi/http.sh;
          [ -f _pulumi/levicape_magmap_http.sh ] && cat _pulumi/levicape_magmap_http.sh;
          [ -f _pulumi/levicape_magmap_http.sh ] && source _pulumi/levicape_magmap_http.sh;
          [ -f _pulumi/levicape_magmap_web.sh ] && cat _pulumi/levicape_magmap_web.sh;
          [ -f _pulumi/levicape_magmap_web.sh ] && source _pulumi/levicape_magmap_web.sh;
          [ -f _pulumi/levicape_magmap_monitor.sh ] && cat _pulumi/levicape_magmap_monitor.sh;
          [ -f _pulumi/levicape_magmap_monitor.sh ] && source _pulumi/levicape_magmap_monitor.sh;
          [ -f _pulumi/levicape_magmap_wwwroot.sh ] && cat _pulumi/levicape_magmap_wwwroot.sh;
          [ -f _pulumi/levicape_magmap_wwwroot.sh ] && source _pulumi/levicape_magmap_wwwroot.sh;
          echo "ü•§Verify imported environment variables";
          set +o histexpand;
          export STACKREF_ROOT="${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}";
          export TARGET_VAR="${STACKREF_ROOT}_codestar_ecr";
          export TARGET_VALUE="${!TARGET_VAR}";
          echo "‚ùî‚ùîCodestar output ${TARGET_VAR}: ${TARGET_VALUE}";
          export ECR_URL=$(echo  ${TARGET_VALUE} | jq -r .repository.url);
          echo "‚ùî‚ùîECR_URL: $ECR_URL";
          aws sts get-caller-identity --output json;
          sleep 2s;
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URL;
          echo "üåêTagging $ECR_URL:git-${{ github.sha }}";
          docker tag ${{ env.APPLICATION_IMAGE_NAME }}:latest $ECR_URL:git-${{ github.sha }};
          docker push $ECR_URL:git-${{ github.sha }};
          echo "‚ú®Tagged $ECR_URL:git-${{ github.sha }}";
      - name: Tag and push image with ${{ env.APPLICATION_IMAGE_NAME }}-${{ env.APPLICATION_ENVIRONMENT }}
        run: |-
          if [[ -z "$PULUMI_STACK_FILTER" || "$PULUMI_STACK_FILTER" == "*" || "$PULUMI_STACK_FILTER" =~ "codestar" ]]; then
          																echo "üìüCodestar output found, deploying image"
          																true
          															else
          																echo "üí¢Please verify PULUMI_STACK_FILTER: $PULUMI_STACK_FILTER 
           This should include codestar for the image push mechanism"
          																exit 0
          															fi;
          ls -la _pulumi || true;
          [ -f _pulumi/application.sh ] && cat _pulumi/application.sh;
          [ -f _pulumi/application.sh ] && source _pulumi/application.sh;
          [ -f _pulumi/codestar.sh ] && cat _pulumi/codestar.sh;
          [ -f _pulumi/codestar.sh ] && source _pulumi/codestar.sh;
          [ -f _pulumi/datalayer.sh ] && cat _pulumi/datalayer.sh;
          [ -f _pulumi/datalayer.sh ] && source _pulumi/datalayer.sh;
          [ -f _pulumi/dns_root.sh ] && cat _pulumi/dns_root.sh;
          [ -f _pulumi/dns_root.sh ] && source _pulumi/dns_root.sh;
          [ -f _pulumi/idp_oidc.sh ] && cat _pulumi/idp_oidc.sh;
          [ -f _pulumi/idp_oidc.sh ] && source _pulumi/idp_oidc.sh;
          [ -f _pulumi/idp_users.sh ] && cat _pulumi/idp_users.sh;
          [ -f _pulumi/idp_users.sh ] && source _pulumi/idp_users.sh;
          [ -f _pulumi/levicape_magmap_channels.sh ] && cat _pulumi/levicape_magmap_channels.sh;
          [ -f _pulumi/levicape_magmap_channels.sh ] && source _pulumi/levicape_magmap_channels.sh;
          [ -f _pulumi/levicape_magmap_client.sh ] && cat _pulumi/levicape_magmap_client.sh;
          [ -f _pulumi/levicape_magmap_client.sh ] && source _pulumi/levicape_magmap_client.sh;
          [ -f _pulumi/http.sh ] && cat _pulumi/http.sh;
          [ -f _pulumi/http.sh ] && source _pulumi/http.sh;
          [ -f _pulumi/levicape_magmap_http.sh ] && cat _pulumi/levicape_magmap_http.sh;
          [ -f _pulumi/levicape_magmap_http.sh ] && source _pulumi/levicape_magmap_http.sh;
          [ -f _pulumi/levicape_magmap_web.sh ] && cat _pulumi/levicape_magmap_web.sh;
          [ -f _pulumi/levicape_magmap_web.sh ] && source _pulumi/levicape_magmap_web.sh;
          [ -f _pulumi/levicape_magmap_monitor.sh ] && cat _pulumi/levicape_magmap_monitor.sh;
          [ -f _pulumi/levicape_magmap_monitor.sh ] && source _pulumi/levicape_magmap_monitor.sh;
          [ -f _pulumi/levicape_magmap_wwwroot.sh ] && cat _pulumi/levicape_magmap_wwwroot.sh;
          [ -f _pulumi/levicape_magmap_wwwroot.sh ] && source _pulumi/levicape_magmap_wwwroot.sh;
          echo "ü•§Verify imported environment variables";
          set +o histexpand;
          export STACKREF_ROOT="${APPLICATION_STACKREF_ROOT:-$APPLICATION_IMAGE_NAME}";
          export TARGET_VAR="${STACKREF_ROOT}_codestar_ecr";
          export TARGET_VALUE="${!TARGET_VAR}";
          echo "‚ùî‚ùîCodestar output ${TARGET_VAR}: ${TARGET_VALUE}";
          export ECR_URL=$(echo  ${TARGET_VALUE} | jq -r .repository.url);
          echo "‚ùî‚ùîECR_URL: $ECR_URL";
          aws sts get-caller-identity --output json;
          sleep 2s;
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URL;
          echo "üåêTagging $ECR_URL:${{ env.APPLICATION_IMAGE_NAME }}-${{ env.APPLICATION_ENVIRONMENT }}";
          docker tag ${{ env.APPLICATION_IMAGE_NAME }}:latest $ECR_URL:${{ env.APPLICATION_IMAGE_NAME }}-${{ env.APPLICATION_ENVIRONMENT }};
          docker push $ECR_URL:${{ env.APPLICATION_IMAGE_NAME }}-${{ env.APPLICATION_ENVIRONMENT }};
          echo "‚ú®Tagged $ECR_URL:${{ env.APPLICATION_IMAGE_NAME }}-${{ env.APPLICATION_ENVIRONMENT }}";
      - name: Cleanup
        run: |-
          rm -f .pulumi-ci .export-cd .pulumi-helper.sh .ci-env;
          rm -rf _pulumi;

########################################
########################################
#**:_$~- {"$$":"head","filename":"[wd][dispatch] - CD - [Dispatch: Preview, Deploy, Push].yml","source":"iac/workflows/github/workflow_dispatch/CD.js"}
#**:_$~- {"$$":"script","generator":"codegen/github/GenerateGithubWorkflow.mjs"}
#**:_$~- {"$$":"body","hashed":"3caab3e4fb37e1bff29613e6e4ec0a8408dd66bab9ac906017e41348d06235e9"}
#**:_$~- {"$$":"footer","started":"2025-04-04T03:35:58.107Z","now":"2025-04-04T03:35:58.116Z","elapsed":"9ms"}
# END OF GENERATED FILE

