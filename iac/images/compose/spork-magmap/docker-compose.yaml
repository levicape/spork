services:
  spork-server:
    image: ${ROOT_IMAGE}
    entrypoint: project
    environment:
      PROJECT_PATH: .
      PROJECT_COMMAND: http:dev
      PORT: "${ROOT_NS}${HTTP_NS}${SPORK_NS}${SPORK_HTTP}"
      LOG_LEVEL: "${LOG_LEVEL}" 
      AWS_CLOUDMAP_NAMESPACE_NAME:
      AWS_CLOUDMAP_SERVICE_NAME:
    ports:
      - "${ROOT_NS}${HTTP_NS}${SPORK_NS}${SPORK_HTTP}:${ROOT_NS}${HTTP_NS}${SPORK_NS}${SPORK_HTTP}"
    volumes: &workspace_volume
      - "../../../..:/workspace"
      # iac/images/compose/<$PWD>
      # - "$PWD/../../../..:/workspace"
  http:
    image: ${ROOT_IMAGE}
    entrypoint: project
    environment:
      PROJECT_PATH: ./packages/magmap-io
      PROJECT_COMMAND: http:dev
      PORT: "${ROOT_NS}${HTTP_NS}${MAGMAP_NS}${MAGMAP_HTTP}"
      LOG_LEVEL: "${LOG_LEVEL}" 
      AWS_CLOUDMAP_NAMESPACE_NAME:
      AWS_CLOUDMAP_SERVICE_NAME:
    ports:
      - "${ROOT_NS}${HTTP_NS}${MAGMAP_NS}${MAGMAP_HTTP}:${ROOT_NS}${HTTP_NS}${MAGMAP_NS}${MAGMAP_HTTP}"
    volumes: *workspace_volume
  ui:
    image: ${ROOT_IMAGE}
    entrypoint: project
    environment: 
      PROJECT_PATH: ./packages/magmap-ui
      PROJECT_COMMAND: staticwww:dev
      PORT: "${ROOT_NS}${HTTP_NS}${MAGMAP_NS}${MAGMAP_UI}"
      LOG_LEVEL: "${LOG_LEVEL}" 
    ports:
      - "${ROOT_NS}${HTTP_NS}${MAGMAP_NS}${MAGMAP_UI}:${ROOT_NS}${HTTP_NS}${MAGMAP_NS}${MAGMAP_UI}"
    volumes: *workspace_volume
  http-canary:
    image: ${ROOT_IMAGE}
    entrypoint: project
    environment:
      PROJECT_PATH: ./packages/magmap-io
      PROJECT_COMMAND: http:canary
      LOG_LEVEL: "${LOG_LEVEL}" 
      AWS_CLOUDMAP_NAMESPACE_NAME:
      AWS_CLOUDMAP_SERVICE_NAME:
    depends_on:
      - http
    volumes: *workspace_volume
  routemap:
      image: ${ROOT_IMAGE}
      entrypoint: routemap
      environment:
        ROUTEMAP_OUTPUT: /conf
        ROUTEMAP_PORT: "${ROOT_NS}0000"
        LOG_LEVEL: "${LOG_LEVEL}" 
        ROUTEMAP: >  
          {
            "/": {
              "$kind": "ComposeRouteResource",
              url: "ui:${ROOT_NS}${HTTP_NS}${MAGMAP_NS}${MAGMAP_UI}",
              protocol: "http",
            },
            "/~/v1/Spork/Magmap": {
              "$kind": "ComposeRouteResource",
              url: "magmap-http:${ROOT_NS}${HTTP_NS}${MAGMAP_NS}${MAGMAP_HTTP}",
              protocol: "http",
            },
            "/~/v1/Spork": {
              "$kind": "LambdaRouteResource",
              url: "spork-server:${ROOT_NS}${HTTP_NS}${SPORK_NS}${SPORK_HTTP}",
              protocol: "http",
              lambda: {
                arn: "arn:aws:lambda:us-west-2:557690612436:function:paloma-nevada-http-current-function-8e60424",
                name: "paloma-nevada-http-current-function-8e60424",
                qualifier: "current",
              },
              cloudmap: {
                namespace: {
                  name: "paloma-datalayer-current-pdns-57a2-0d48",
                },
                service: {
                  name: "paloma-nevada-http-current-service-on-8e60424"
                },
                instance: {
                  id: "paloma-nevada-http-current-instance",
                  attributes: {
                    AWS_INSTANCE_CNAME: "https://xmlcdrzlqmgl2dghhih5pqotwy0kvwyl.lambda-url.us-west-2.on.aws/",
                    CI_ENVIRONMENT: "current",
                    CONTEXT_PREFIX: "paloma-nevada-http-current",
                    PACKAGE_NAME: "@levicape/paloma-nevada-io",
                    STACKREF_ROOT: "paloma",
                    STACK_NAME: "paloma-nevada-http.current"
                  }
                }
              }
            }
          }      
      volumes: 
        - "$PWD/../../../..:/workspace"
        - "$PWD:/compose/${ROOT_IMAGE}"
  caddy:
    image: "caddy:2.9"
    depends_on:
      - routemap
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    ports:
      - "${ROOT_NS}0000:443"
      - "${ROOT_NS}2000:80"
      - "${ROOT_NS}3000:443"
    volumes:
      - $PWD/conf:/etc/caddy
      - caddy_data:/data
      - caddy_config:/config









































volumes:
  caddy_data:
  caddy_config: